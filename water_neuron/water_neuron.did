type Account = record { owner : principal; subaccount : opt blob };
type BallotInfo = record { vote : int32; proposal_id : opt NeuronId };
type CancelWithdrawalError = variant {
  GenericError : record { code : int32; message : text };
  TooLate;
  BadCommand : record { message : text };
  UnknownTimeLeft;
  BadCaller : record { message : text };
  MergeNeuronError : record { message : text };
  StopDissolvementError : record { message : text };
  RequestNotFound;
  GovernanceError : GovernanceError;
  GuardError : record { guard_error : GuardError };
  GetFullNeuronError : record { message : text };
};
type CanisterInfo = record {
  neuron_6m_account : Account;
  latest_distribution_icp_per_vp : opt float64;
  neuron_id_6m : opt NeuronId;
  neuron_id_8y : opt NeuronId;
  tracked_6m_stake : nat64;
  minimum_withdraw_amount : nat64;
  neuron_8y_stake_e8s : nat64;
  governance_fee_share_percent : nat64;
  neuron_8y_account : Account;
  minimum_deposit_amount : nat64;
  neuron_6m_stake_e8s : nat64;
  exchange_rate : nat64;
  nicp_supply : nat64;
  total_icp_deposited : nat64;
  stakers_count : nat64;
};
type ConsentInfo = record {
  metadata : ConsentMessageMetadata;
  consent_message : ConsentMessage;
};
type ConsentMessage = variant {
  LineDisplayMessage : record { pages : vec LineDisplayPage };
  GenericDisplayMessage : text;
};
type ConsentMessageMetadata = record {
  utc_offset_minutes : opt nat16;
  language : text;
};
type ConsentMessageRequest = record {
  arg : blob;
  method : text;
  user_preferences : ConsentMessageSpec;
};
type ConsentMessageSpec = record {
  metadata : ConsentMessageMetadata;
  device_spec : opt DisplayMessageType;
};
type ConversionArg = record { maybe_subaccount : opt blob; amount_e8s : nat64 };
type ConversionError = variant {
  GenericError : record { code : int32; message : text };
  TransferError : TransferError;
  AmountTooLow : record { minimum_amount_e8s : nat64 };
  TransferFromError : TransferFromError;
  GuardError : record { guard_error : GuardError };
};
type DepositSuccess = record {
  nicp_amount : opt nat64;
  block_index : nat;
  transfer_id : nat64;
};
type DisplayMessageType = variant {
  GenericDisplay;
  LineDisplay : record { characters_per_line : nat16; lines_per_page : nat16 };
};
type DissolveState = variant {
  DissolveDelaySeconds : nat64;
  WhenDissolvedTimestampSeconds : nat64;
};
type ErrorInfo = record { description : text };
type Event = record { timestamp : nat64; payload : EventType };
type EventType = variant {
  ClaimedAirdrop : record { block_index : nat64; caller : principal };
  StartedToDissolve : record { withdrawal_id : nat64 };
  MaturityNeuron : record {
    from_neuron_type : NeuronOrigin;
    neuron_id : NeuronId;
  };
  NeuronSixMonths : NeuronId;
  Upgrade : UpgradeArg;
  Init : InitArg;
  MirroredProposal : record {
    nns_proposal_id : NeuronId;
    sns_proposal_id : NeuronId;
  };
  NeuronEightYears : NeuronId;
  DistributeICPtoSNS : record { amount : nat64; receiver : principal };
  DistributeICPtoSNSv2;
  NIcpWithdrawal : record {
    nicp_burned : nat64;
    nicp_burn_index : nat64;
    receiver : Account;
  };
  MergeNeuron : record { neuron_id : NeuronId };
  IcpDeposit : record {
    block_index : nat64;
    amount : nat64;
    receiver : Account;
  };
  DisbursedUserNeuron : record {
    withdrawal_id : nat64;
    transfer_block_height : nat64;
  };
  TransferExecuted : record { block_index : opt nat64; transfer_id : nat64 };
  DisbursedMaturityNeuron : record {
    transfer_block_height : nat64;
    neuron_id : NeuronId;
  };
  DispatchICPRewards : record {
    nicp_amount : nat64;
    sns_gov_amount : nat64;
    from_neuron_type : NeuronOrigin;
  };
  SplitNeuron : record { withdrawal_id : nat64; neuron_id : NeuronId };
};
type ExecutedTransfer = record {
  block_index : opt nat64;
  timestamp : nat64;
  transfer : PendingTransfer;
};
type Followees = record { followees : vec NeuronId };
type GetEventsArg = record { start : nat64; length : nat64 };
type GetEventsResult = record { total_event_count : nat64; events : vec Event };
type GovernanceError = record { error_message : text; error_type : int32 };
type GuardError = variant { AlreadyProcessing; TooManyConcurrentRequests };
type Icrc21Error = variant {
  GenericError : record { description : text; error_code : nat64 };
  InsufficientPayment : ErrorInfo;
  UnsupportedCanisterCall : ErrorInfo;
  ConsentMessageUnavailable : ErrorInfo;
};
type InitArg = record {
  wtn_ledger_id : principal;
  wtn_governance_id : principal;
  nicp_ledger_id : principal;
};
type KnownNeuronData = record { name : text; description : opt text };
type LineDisplayPage = record { lines : vec text };
type LiquidArg = variant { Upgrade : opt UpgradeArg; Init : InitArg };
type MergeResponse = record {
  target_neuron : opt Neuron;
  source_neuron : opt Neuron;
  target_neuron_info : opt NeuronInfo;
  source_neuron_info : opt NeuronInfo;
};
type Neuron = record {
  id : opt NeuronId;
  staked_maturity_e8s_equivalent : opt nat64;
  controller : opt principal;
  recent_ballots : vec BallotInfo;
  kyc_verified : bool;
  neuron_type : opt int32;
  not_for_profit : bool;
  maturity_e8s_equivalent : nat64;
  cached_neuron_stake_e8s : nat64;
  created_timestamp_seconds : nat64;
  auto_stake_maturity : opt bool;
  aging_since_timestamp_seconds : nat64;
  hot_keys : vec principal;
  account : blob;
  joined_community_fund_timestamp_seconds : opt nat64;
  dissolve_state : opt DissolveState;
  followees : vec record { int32; Followees };
  neuron_fees_e8s : nat64;
  transfer : opt NeuronStakeTransfer;
  known_neuron_data : opt KnownNeuronData;
  spawn_at_timestamp_seconds : opt nat64;
};
type NeuronId = record { id : nat64 };
type NeuronInfo = record {
  dissolve_delay_seconds : nat64;
  recent_ballots : vec BallotInfo;
  neuron_type : opt int32;
  created_timestamp_seconds : nat64;
  state : int32;
  stake_e8s : nat64;
  joined_community_fund_timestamp_seconds : opt nat64;
  retrieved_at_timestamp_seconds : nat64;
  known_neuron_data : opt KnownNeuronData;
  voting_power : nat64;
  age_seconds : nat64;
};
type NeuronOrigin = variant { NICPSixMonths; SnsGovernanceEightYears };
type NeuronStakeTransfer = record {
  to_subaccount : blob;
  neuron_stake_e8s : nat64;
  from : opt principal;
  memo : nat64;
  from_subaccount : blob;
  transfer_timestamp : nat64;
  block_height : nat64;
};
type PendingTransfer = record {
  memo : opt nat64;
  unit : Unit;
  from_subaccount : opt blob;
  transfer_id : nat64;
  amount : nat64;
  receiver : Account;
};
type Result = variant { Ok : MergeResponse; Err : CancelWithdrawalError };
type Result_1 = variant { Ok : nat64; Err : ConversionError };
type Result_2 = variant { Ok : NeuronId; Err : NeuronId };
type Result_3 = variant { Ok : DepositSuccess; Err : ConversionError };
type Result_5 = variant { Ok : ConsentInfo; Err : Icrc21Error };
type Result_4 = variant { Ok : WithdrawalSuccess; Err : ConversionError };
type StandardRecord = record { url : text; name : text };
type TransferError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  BadBurn : record { min_burn_amount : nat };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
type TransferFromError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  InsufficientAllowance : record { allowance : nat };
  BadBurn : record { min_burn_amount : nat };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
type TransferStatus = variant {
  Executed : ExecutedTransfer;
  Unknown;
  Pending : PendingTransfer;
};
type Unit = variant { ICP; WTN; NICP };
type UpgradeArg = record { governance_fee_share_percent : opt nat64 };
type WithdrawalDetails = record {
  status : WithdrawalStatus;
  request : WithdrawalRequest;
};
type WithdrawalRequest = record {
  nicp_burned : nat64;
  withdrawal_id : nat64;
  icp_due : nat64;
  nicp_burn_index : nat64;
  timestamp : nat64;
  receiver : Account;
  neuron_id : opt NeuronId;
};
type WithdrawalStatus = variant {
  ConversionDone : record { transfer_block_height : nat64 };
  NotFound;
  Cancelled;
  WaitingToSplitNeuron;
  WaitingDissolvement : record { neuron_id : NeuronId };
  WaitingToStartDissolving : record { neuron_id : NeuronId };
};
type WithdrawalSuccess = record {
  block_index : nat;
  withdrawal_id : nat64;
  icp_amount : opt nat64;
};
service : (LiquidArg) -> {
  get_airdrop_allocation : (opt principal) -> (nat64) query;
  get_pending_rewards : (opt principal) -> (nat64) query;
  get_events : (GetEventsArg) -> (GetEventsResult) query;
  get_info : () -> (CanisterInfo) query;
  get_transfer_statuses : (vec nat64) -> (vec TransferStatus) query;
  get_withdrawal_requests : (opt Account) -> (vec WithdrawalDetails) query;
  get_wtn_proposal_id : (nat64) -> (Result_2) query;
  icrc10_supported_standards : () -> (vec StandardRecord) query;
  icrc21_canister_call_consent_message : (ConsentMessageRequest) -> (Result_5);

  icp_to_nicp : (ConversionArg) -> (Result_3);
  nicp_to_icp : (ConversionArg) -> (Result_4);
  cancel_withdrawal : (NeuronId) -> (Result);
  claim_airdrop : () -> (Result_1);
}